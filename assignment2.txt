1. Variable Initialization
Question: Write a program that declares an integer variable, initializes it with a value of 42, and prints the value to the console.

2. Swapping Variables
Question: Create a program that swaps the values of two integer variables without using a temporary variable. Demonstrate this by printing the values before and after the swap.

#include<stdio.h>
int main(){
    int n =42,v=33;
    printf("the value  n: %d v: %d\n ",n,v);
    n = n + v;
    v = n-v;
    n = n - v; 
    printf("the value  n: %d  v:%d ",n,v);

return 0;
}

3. User Input and Output
Question: Write a program that prompts the user to enter their name and age, stores these values in appropriate variables, and then prints a greeting message that includes both the name and age.

#include<stdio.h>

int main() {
    char name[20]; 
    int age;        
    printf("Enter your name: ");
    scanf("%s", name);  
    printf("Enter your age: ");
    scanf("%d", &age);  
    printf("hi %s, you are %d years old.\n", name, age);

    return 0;
}


4. Data Type Conversion
Question: Write a program that declares an integer variable, assigns it a value of 10, and then converts it to a float variable. Print both the integer and float values to show the conversion.

#include<stdio.h>
int main(){
    int n =10;
    float w =n;


    printf("the value of n is %d\n",n);
    printf("the value of w is %f\n",w);

}

5. Constants vs. Variables
Question: Using #define, create a constant for the value of Pi (3.14). Write a program that calculates the area of a circle given its radius (stored in a variable) and prints the result using the constant for Pi.

#include<stdio.h>
#define pi 3.14
int main(){
    float area;
    float radius=4;

    area= pi * radius * radius;
    printf("area is :%f",area);
    return 0;
}

6. Scope of Variables
Question: Write a program that demonstrates the concept of variable scope by declaring a global variable and modifying it within a function. Print the value of the global variable before and after modification.
#include <stdio.h>
int value = 10; 

void updated() {
    value = value + 5;  
    printf(" after updating: %d\n", value);
}

int main() {
    printf("Before updating : %d\n", value);
        updated();
    
    return 0;
}
 Using Augmented Assignment Operators
Question: Write a program that uses augmented assignment operators (+=, -=, *=, /=) to perform calculations on an integer variable initialized to 100. Print the value after each operation.

#include<stdio.h>
int main(){
int n=100,v;
 v= n + 2;
 printf(" the value is n: %d\n",v);
  v= n - 2;
 printf(" the value is n: %d\n",v);
  v= n * 2;
 printf(" the value is n: %d\n",v);
  v= n / 2;
 printf(" the value is n: %d\n",v);

    return 0;
}
 the value is n: 102
 the value is n: 98
 the value is n: 200
 the value is n: 50

9. Array of Variables
Question: Create an array of integers with five elements. Initialize it with values of your choice, then write a program to calculate and print the sum of all elements in the array.

#include<stdio.h>
int main(){
    int arr[5]={1,2,3,4,5};
    int sum =0;
    for(int i =0;i<5;i++)
    {
        sum = sum + arr[i];
    }
    printf("the sum is %d",sum);
    return 0;
}


// #include <stdio.h>

// int main() {
//     int arr[5];  // Array to store 5 integers
//     int sum = 0; // Variable to store the sum of the elements
//    int n ;
//     // Prompt the user to enter values for each element of the array
//     printf("Enter  integers:\n");
//     scanf("%d",&n);
//     for (int i = 0; i < n; i++) {
//         printf("Enter value for element : ");
//         scanf("%d", &arr[i]);  // Read each element from user input
//     }

//     // Calculate the sum of all elements in the array
//     for (int i = 0; i < 5; i++) {
//         sum += arr[i];  // Add each element to sum
//     }

//     // Print the sum of the elements
//     printf("The sum is %d\n", sum);

//     return 0;
// }



Assignment: User Authentication Program
Objective
Create a C program that prompts the user for a username and password, then checks if the entered credentials match predefined values. Use logical operators to determine if the authentication is successful.
Requirements
Define two constants for the correct username and password.
Prompt the user to enter their username and password.
Use logical operators (&&, ||, !) to check if:
If both are correct, display a success message.
Implement additional checks:
If the username is empty, display a message indicating that the username cannot be empty.
If the password is empty, display a message indicating that the password cannot be empty.
The username matches the predefined username AND the password matches the predefined password.
If either the username or password is incorrect, display an appropriate error message.
 #include <stdio.h>
#include <string.h>

#define user "anusree"
#define password "anusree123"

int main() {
    char name[50];
    char Passwords[50];
    
    printf("Enter the username: ");
    scanf("%s", name);
    printf("Enter the password: ");
    scanf("%s", Passwords);

    if (strlen(name) == 0 || strlen(Passwords) == 0) {
        printf("Error: Username and password cannot be empty.\n");
        
    }
    if (strcmp(name, user) != 0 || strcmp(Passwords, password) != 0) {
        printf("Error: One of the username or password is incorrect.\n");
        } 
        else{
            printf("Authentication success %s" ,name);
        }
   

    return 0;
}

#include<stdio.h>
int main(){
    unsigned int a=50;
    
    printf("001a = %u \n",a);
    a = -50;
    printf("002a = %u \n",a);

    return 0;
}



1. Write a C program to determine if the least significant bit of a given integer is set (i.e., check if the number is odd).
 
2. Create a C program that retrieves the value of the nth bit from a given integer.
 
3. Develop a C program that sets the nth bit of a given integer to 1.
 
4. Write a C program that clears (sets to 0) the nth bit of a given integer.
 
5. Create a C program that toggles the nth bit of a given integer.